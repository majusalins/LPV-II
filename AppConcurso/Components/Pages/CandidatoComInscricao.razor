@page "/cadastroComInscricao"
@rendermode InteractiveServer
@using AppConcurso.Models
@using AppConcurso.Controllers
@inject CandidatoController candidatoController
@inject CargoController cargoController
@inject InscricaoController inscricaoController
@inject NavigationManager navegacao

<div class="container">
    <h1>CADASTRO DE CANDIDATO COM INSCRIÇÃO</h1>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Nome:</label>
                        <input @bind="novoCandidato.Nome" class="form-control" disabled="@campoBloqueado" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>CPF:</label>
                        <input @bind="novoCandidato.Cpf" class="form-control" disabled="@campoBloqueado" />
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Data de Nascimento:</label>
                        <input type="date" @bind="novoCandidato.DataNasc" class="form-control" disabled="@campoBloqueado" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Cargo:</label>
                        <select @bind="cargoSelecionadoId" class="form-control" disabled="@campoBloqueado">
                            <option value="">-- Selecione --</option>
                            @foreach (var cargo in cargosDisponiveis)
                            {
                                <option value="@cargo.Id">@cargo.NomeCargo</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="mt-4">
                @if (mostrarConfirmacao == false)
                {
                    <button class="btn btn-primary" @onclick="SalvarCadastroComInscricao">Salvar</button>
                    <button class="btn btn-secondary ml-2" @onclick="LimparFormulario">Cancelar</button>
                    
                }
                else
                {
                    <div class="alert alert-success" role="alert">
                        Cadastro e inscrição realizados com sucesso!
                    </div>
                    <button class="btn btn-success" @onclick="NovoCadastro">Nova Inscrição</button>
                }
            </div>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header">
            <h5>Candidatos Cadastrados</h5>
        </div>
        <div class="card-body">
            @if (candidatosCadastrados == null || !candidatosCadastrados.Any())
            {
                <p>Nenhum candidato cadastrado.</p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th class="list-item-header">Nome</th>
                            <th class="list-item-header">CPF</th>
                            <th class="list-item-header">Data Nasc.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var candidato in candidatosCadastrados)
                        {
                            <tr>
                                <td class="list-item-content">@candidato.Nome</td>
                                <td class="list-item-content">@candidato.Cpf</td>
                                <td class="list-item-content">@candidato.DataNasc?.ToString("dd/MM/yyyy")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private Candidato novoCandidato = new Candidato();
    private List<Cargo> cargosDisponiveis = new List<Cargo>();
    private List<Candidato> candidatosCadastrados = new List<Candidato>();
    private List<Inscricao> listaInsc = new();
    private int cargoSelecionadoId;
    private bool mostrarConfirmacao = false;
    private bool campoBloqueado = false;
    private string mensagemErro = "";

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    private async Task CarregarDados()
    {
        try
        {
            candidatosCadastrados = await candidatoController.ListaCandidatos();
            cargosDisponiveis = await cargoController.ListaCargos();
            listaInsc = await inscricaoController.ListaInscricoes();
        }
        catch (Exception ex)
        {
            MostrarErro($"Erro ao carregar dados: {ex.Message}");
        }
    }

    private async Task SalvarCadastroComInscricao()
    {
        mensagemErro = "";
        
        if (!ValidarCampos())
        {
            MostrarErro("Preencha todos os campos obrigatórios");
            return;
        }

        try
        {
            await candidatoController.Add(novoCandidato);
            await candidatoController.Salvar();

            var inscricao = new Inscricao
            {
                IdCandidato = novoCandidato.Id, 
                IdCargo = cargoSelecionadoId,
                DataInsc = DateTime.Now,
                NumInscricao = 10000 + listaInsc.Count + 1
            };

            await inscricaoController.Add(inscricao);
            await inscricaoController.Salvar();

            await CarregarDados();
            
            mostrarConfirmacao = true;
            campoBloqueado = true;
        }
        catch (Exception ex)
        {
            MostrarErro($"Erro inesperado: {ex.Message}");
        }
    }

    private bool ValidarCampos()
    {
        return !string.IsNullOrWhiteSpace(novoCandidato.Nome) &&
               !string.IsNullOrWhiteSpace(novoCandidato.Cpf) &&
               novoCandidato.DataNasc != null &&
               cargoSelecionadoId > 0;
    }

    private void MostrarErro(string mensagem)
    {
        mensagemErro = mensagem;
        mostrarConfirmacao = false;
        StateHasChanged();
    }

    private void NovoCadastro()
    {
        novoCandidato = new Candidato();
        cargoSelecionadoId = 0;
        mostrarConfirmacao = false;
        campoBloqueado = false;
        mensagemErro = "";
        StateHasChanged();
    }

    private void LimparFormulario()
    {
        NovoCadastro();
    }
}