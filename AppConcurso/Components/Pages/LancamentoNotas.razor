@page "/lancarNotas"
@rendermode InteractiveServer
@using AppConcurso.Models
@using AppConcurso.Controllers
@inject CandidatoController candidatoController
@inject CargoController cargoController
@inject InscricaoController inscricaoController
@inject NavigationManager navegacao

<div class="container">
    <h3 class="mb-3">LANÇAMENTO DE NOTAS</h3>

    <div class="mb-4">
        <div class="input-group">
            <input type="text" class="form-control" @bind="valorBusca"
                placeholder="Digite o número de inscrição ou CPF" />
            <button class="btn btn-primary" @onclick="BuscarInscricao">
                Buscar
            </button>
        </div>
    </div>

    @if (inscricao != null)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@inscricao.Candidato.Nome</h5>
                <p class="card-text">
                    CPF: @inscricao.Candidato.Cpf<br>
                    Cargo: @inscricao.Cargo.NomeCargo<br>
                    Inscrição: @inscricao.NumInscricao
                </p>

                <div class="row">
                    <div class="col-md-4">
                        <label>Nota Geral:</label>
                        <input type="number" step="0.1" min="0" max="10" @bind="inscricao.NotaConhGerais"
                            class="form-control" />
                    </div>

                    <div class="col-md-4">
                        <label>Nota Específica:</label>
                        <input type="number" step="0.1" min="0" max="10" @bind="inscricao.NotaConhEspec"
                            class="form-control" />
                    </div>
                </div>

                <div class="mt-3">
                    <button @onclick="SalvarNotas" class="btn btn-success">Salvar Notas</button>
                    <button @onclick="Limpar" class="btn btn-secondary">Limpar</button>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(mensagem))
    {
        <div class="alert @classeAlert mt-3">
            @mensagem
        </div>
    }
</div>

@code {
    private Inscricao inscricao;
    private string valorBusca = "";
    private string mensagem = "";
    private string classeAlert = "alert-success";

    private async Task BuscarInscricao()
    {
        try
        {
            inscricao = await inscricaoController.BuscarInscricao(valorBusca);

            if (inscricao == null)
            {
                MostrarMensagem("Nenhuma inscrição encontrada!", "alert-danger");
            }
        }
        catch
        {
            MostrarMensagem("Erro na busca", "alert-danger");
        }
    }

    private async Task SalvarNotas()
    {
        try
        {
            if (inscricao.NotaConhGerais < 0 || inscricao.NotaConhGerais > 70 ||
            inscricao.NotaConhEspec < 0 || inscricao.NotaConhEspec > 30)
            {
                MostrarMensagem("Notas devem ser entre 0 e 70 para Conhecimentos Gerais e entre 0 e 30 para Conhecimentos Específicos!",
                "alert-danger");
                return;
            }

            await inscricaoController.AtualizarNotas(inscricao);
            MostrarMensagem("Notas salvas com sucesso!", "alert-success");
        }
        catch
        {
            MostrarMensagem("Erro ao salvar notas", "alert-danger");
        }
    }

    private void Limpar()
    {
        inscricao = null;
        valorBusca = "";
        mensagem = "";
    }

    private void MostrarMensagem(string texto, string tipo)
    {
        mensagem = texto;
        classeAlert = tipo;
        StateHasChanged();
    }
}
